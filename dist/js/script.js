const setDelay=delay=>new Promise((resolve=>{setTimeout((()=>{resolve()}),delay)})),arrayShuffle=array=>{let index=array.length,randomInt=null;for(;index;)randomInt=Math.floor(Math.random()*index),index--,[array[index],array[randomInt]]=[array[randomInt],array[index]];return console.log(array),array},gameInit=()=>({cards:arrayShuffle([{color:"bg-red-500",isFlipped:!1,isMatched:!1,isCleared:!1},{color:"bg-orange-500",isFlipped:!1,isMatched:!1,isCleared:!1},{color:"bg-green-500",isFlipped:!1,isMatched:!1,isCleared:!1},{color:"bg-blue-500",isFlipped:!1,isMatched:!1,isCleared:!1},{color:"bg-red-500",isFlipped:!1,isMatched:!1,isCleared:!1},{color:"bg-orange-500",isFlipped:!1,isMatched:!1,isCleared:!1},{color:"bg-green-500",isFlipped:!1,isMatched:!1,isCleared:!1},{color:"bg-blue-500",isFlipped:!1,isMatched:!1,isCleared:!1}]),get flippedCards(){return this.cards.filter((card=>card.isFlipped))},get remainingCards(){return this.cards.filter((card=>!card.isCleared))},async flipCard($el,card){card.isFlipped=!card.isFlipped;const flippedCards=this.flippedCards.filter((card=>!card.isMatched));2!==flippedCards.length&&flippedCards.length%2!=0||(flippedCards[0].color===flippedCards[1].color?(flippedCards.forEach((card=>{card.isMatched=!0,card.animate="animate-rubber"})),await setDelay(250),flippedCards.forEach((card=>card.isCleared=!0)),this.remainingCards.length||(alert("You win"),location.reload())):flippedCards.forEach((card=>{card.animate="animate-shake"})),await setDelay(500),flippedCards.forEach((card=>card.isFlipped=!1)),console.log(flippedCards),this.remainingCards.forEach((card=>{card.animate=""})))}});